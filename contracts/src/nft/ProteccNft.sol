// SPDX-License-Identifier: AGPL-3.0-only
pragma solidity 0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import {AxelarExecutable} from "axelar-gmp-sdk-solidity/executable/AxelarExecutable.sol";
import {IAxelarGateway} from "axelar-gmp-sdk-solidity/interfaces/IAxelarGateway.sol";
import {IERC20} from "axelar-gmp-sdk-solidity/interfaces/IERC20.sol";

contract ProteccNft is ERC721, ERC721URIStorage, Ownable, AxelarExecutable {
    uint256 private _nextTokenId;
    string public sourceChain;
    string public sourceAddress;

    constructor(
        address initialOwner,
        address gateway_
    )
        ERC721("Protecc", "PTC")
        Ownable(initialOwner)
        AxelarExecutable(gateway_)
    {}

    function _baseURI() internal pure override returns (string memory) {
        return "https://twitter.com/thisisbatoul";
    }

    function tokenURI(
        uint256 tokenId
    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {
        require(
            tokenId >= 0 && tokenId < _nextTokenId,
            "ERC721Metadata: URI query for nonexistent token"
        );
        return _baseURI();
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view override(ERC721, ERC721URIStorage) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    // Handles calls created by setAndSend. Updates this contract's value
    function _execute(
        string calldata sourceChain_,
        string calldata sourceAddress_,
        bytes calldata payload_
    ) internal override {
        // Note: later on add position data to this nft
        // (e.g. you'll have to encode liquidity, tickLower, tickUpper, etc.)

        // Once established, we can use this to figure out how much they should earn
        // in terms of the yield generated by Savings DAI
        address recipient = abi.decode(payload_, (address));
        sourceChain = sourceChain_;
        sourceAddress = sourceAddress_;
        uint256 tokenId = _nextTokenId++;
        _safeMint(recipient, tokenId);
    }
}
